
root in ~/terraform-projects/data via 💠 default on ☁️  (us-east-1) 
❯ cat main.tf 
resource "random_uuid" "id1" {
   
}
resource "random_uuid" "id2" {
   
}
resource "random_uuid" "id3" {
   
}
resource "random_uuid" "id4" {
   
}
resource "random_uuid" "id5" {
   
}
resource "random_uuid" "id6" {
   
}
resource "random_uuid" "id7" {
   
}
resource "random_integer" "order1" {
  min     = 1
  max     = 99999
 
}
resource "random_integer" "order2" {
  min     = 1
  max     = 222222
 
}



root in ~/terraform-projects/data via 💠 default on ☁️  (us-east-1) 
❯ cat output.tf 
output "id1" {
   value = random_uuid.id1.result
}
output "id2" {
    value = random_uuid.id2.result
   
}
output "id3" {
    value = random_uuid.id3.result
   
}

output "id4" {
    value = random_uuid.id4.result
   
}
output "id5" {
    value = random_uuid.id5.result
}
   
output "id6" {
    value = random_uuid.id6.result
   
}
output "id7" {
    value = random_uuid.id7.result
   
}
output "order1" {
 value = random_integer.order1.result
 
}
output "order2" {
 value = random_integer.order1.result
 
}





root in ~/terraform-projects on ☁️  (us-east-1) 
❯ cd output/

root in ~/terraform-projects/output via 💠 default on ☁️  (us-east-1) 
❯ ll
total 32
drwxr-xr-x 3 root root 4096 Jul 21 11:25 ./
drwxr-xr-x 4 root root 4096 Jul 21 11:24 ../
-rw-r--r-- 1 root root  198 Jul 21 10:16 main.tf
drwxr-xr-x 3 root root 4096 Jul 21 11:25 .terraform/
-rw-r--r-- 1 root root 1154 Jul 21 11:25 .terraform.lock.hcl
-rw-r--r-- 1 root root  718 Jul 21 11:25 terraform.tfstate
-rw-r--r-- 1 root root  180 Jul 21 11:25 terraform.tfstate.backup
-rw-r--r-- 1 root root  121 Jul 21 10:16 variable.tf




root in ~/terraform-projects/output via 💠 default on ☁️  (us-east-1) 
❯ cat main.tf 
resource "random_pet" "my-pet" {

  length    = var.length 
}

output "pet-name" {

        value = random_pet.my-pet.id
        description = "Record the value of pet ID generated by the random_pet resource"
}




root in ~/terraform-projects/output via 💠 default on ☁️  (us-east-1) 
❯ cat variable.tf 

variable "prefix" {
  default = "Mrs"
}

variable "separator" {
        default = "."
}

variable "length" {
        default = "1"
}

root in ~/terraform-projects/output via 💠 default on ☁️  (us-east-1) 
❯ 











root in ~/terraform-projects/data via 💠 default on ☁️  (us-east-1) 
❯ ll
total 16
drwxr-xr-x 2 root root 4096 Jul 21 11:24 ./
drwxr-xr-x 4 root root 4096 Jul 21 11:24 ../
-rw-r--r-- 1 root root  405 Jul 21 10:16 main.tf
-rw-r--r-- 1 root root  507 Jul 21 10:16 output.tf

root in ~/terraform-projects/data via 💠 default on ☁️  (us-east-1) 
❯ terraform show
No state.

root in ~/terraform-projects/data via 💠 default on ☁️  (us-east-1) 
❯ terraform init

Initializing the backend...

Initializing provider plugins...
- Finding latest version of hashicorp/random...
- Installing hashicorp/random v3.7.2...
- Installed hashicorp/random v3.7.2 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.









root in ~/terraform-projects/data via 💠 default on ☁️  (us-east-1) 
❯ terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # random_integer.order1 will be created
  + resource "random_integer" "order1" {
      + id     = (known after apply)
      + max    = 99999
      + min    = 1
      + result = (known after apply)
    }

  # random_integer.order2 will be created
  + resource "random_integer" "order2" {
      + id     = (known after apply)
      + max    = 222222
      + min    = 1
      + result = (known after apply)
    }

  # random_uuid.id1 will be created
  + resource "random_uuid" "id1" {
      + id     = (known after apply)
      + result = (known after apply)
    }

  # random_uuid.id2 will be created
  + resource "random_uuid" "id2" {
      + id     = (known after apply)
      + result = (known after apply)
    }

  # random_uuid.id3 will be created
  + resource "random_uuid" "id3" {
      + id     = (known after apply)
      + result = (known after apply)
    }

  # random_uuid.id4 will be created
  + resource "random_uuid" "id4" {
      + id     = (known after apply)
      + result = (known after apply)
    }

  # random_uuid.id5 will be created
  + resource "random_uuid" "id5" {
      + id     = (known after apply)
      + result = (known after apply)
    }

  # random_uuid.id6 will be created
  + resource "random_uuid" "id6" {
      + id     = (known after apply)
      + result = (known after apply)
    }

  # random_uuid.id7 will be created
  + resource "random_uuid" "id7" {
      + id     = (known after apply)
      + result = (known after apply)
    }

Plan: 9 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + id1    = (known after apply)
  + id2    = (known after apply)
  + id3    = (known after apply)
  + id4    = (known after apply)
  + id5    = (known after apply)
  + id6    = (known after apply)
  + id7    = (known after apply)
  + order1 = (known after apply)
  + order2 = (known after apply)

─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply"
now.




root in ~/terraform-projects/data via 💠 default on ☁️  (us-east-1) 
❯ terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # random_integer.order1 will be created
  + resource "random_integer" "order1" {
      + id     = (known after apply)
      + max    = 99999
      + min    = 1
      + result = (known after apply)
    }

  # random_integer.order2 will be created
  + resource "random_integer" "order2" {
      + id     = (known after apply)
      + max    = 222222
      + min    = 1
      + result = (known after apply)
    }

  # random_uuid.id1 will be created
  + resource "random_uuid" "id1" {
      + id     = (known after apply)
      + result = (known after apply)
    }

  # random_uuid.id2 will be created
  + resource "random_uuid" "id2" {
      + id     = (known after apply)
      + result = (known after apply)
    }

  # random_uuid.id3 will be created
  + resource "random_uuid" "id3" {
      + id     = (known after apply)
      + result = (known after apply)
    }

  # random_uuid.id4 will be created
  + resource "random_uuid" "id4" {
      + id     = (known after apply)
      + result = (known after apply)
    }

  # random_uuid.id5 will be created
  + resource "random_uuid" "id5" {
      + id     = (known after apply)
      + result = (known after apply)
    }

  # random_uuid.id6 will be created
  + resource "random_uuid" "id6" {
      + id     = (known after apply)
      + result = (known after apply)
    }

  # random_uuid.id7 will be created
  + resource "random_uuid" "id7" {
      + id     = (known after apply)
      + result = (known after apply)
    }

Plan: 9 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + id1    = (known after apply)
  + id2    = (known after apply)
  + id3    = (known after apply)
  + id4    = (known after apply)
  + id5    = (known after apply)
  + id6    = (known after apply)
  + id7    = (known after apply)
  + order1 = (known after apply)
  + order2 = (known after apply)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

random_uuid.id5: Creating...
random_uuid.id6: Creating...
random_uuid.id3: Creating...
random_uuid.id4: Creating...
random_uuid.id7: Creating...
random_uuid.id1: Creating...
random_uuid.id3: Creation complete after 0s [id=6431760f-57e0-65a3-2d33-6d6596f6e6f9]
random_uuid.id2: Creating...
random_integer.order2: Creating...
random_integer.order1: Creating...
random_uuid.id6: Creation complete after 0s [id=1f652882-1d2f-da79-eabb-488abd3571bf]
random_uuid.id7: Creation complete after 0s [id=bf63ec1f-da38-8888-63e8-32f101f88fe5]
random_uuid.id4: Creation complete after 0s [id=318a75c2-8c00-f6fb-3a8b-c94b2985d1b7]
random_uuid.id2: Creation complete after 0s [id=2c6809a9-a7eb-d87c-eaea-d8ca77af113f]
random_integer.order2: Creation complete after 0s [id=196547]
random_uuid.id1: Creation complete after 0s [id=421b5eb2-a5ee-d3f9-6a2c-ffed80afb0ea]
random_integer.order1: Creation complete after 0s [id=95208]
random_uuid.id5: Creation complete after 0s [id=81e14361-03ca-1dff-648b-4cb2ba5363e1]

Apply complete! Resources: 9 added, 0 changed, 0 destroyed.

Outputs:

id1 = "421b5eb2-a5ee-d3f9-6a2c-ffed80afb0ea"
id2 = "2c6809a9-a7eb-d87c-eaea-d8ca77af113f"
id3 = "6431760f-57e0-65a3-2d33-6d6596f6e6f9"
id4 = "318a75c2-8c00-f6fb-3a8b-c94b2985d1b7"
id5 = "81e14361-03ca-1dff-648b-4cb2ba5363e1"
id6 = "1f652882-1d2f-da79-eabb-488abd3571bf"
id7 = "bf63ec1f-da38-8888-63e8-32f101f88fe5"
order1 = 95208
order2 = 95208



root in ~/terraform-projects/data via 💠 default on ☁️  (us-east-1) took 2s 
❯ terraform show
# random_integer.order1:
resource "random_integer" "order1" {
    id     = "95208"
    max    = 99999
    min    = 1
    result = 95208
}

# random_integer.order2:
resource "random_integer" "order2" {
    id     = "196547"
    max    = 222222
    min    = 1
    result = 196547
}

# random_uuid.id1:
resource "random_uuid" "id1" {
    id     = "421b5eb2-a5ee-d3f9-6a2c-ffed80afb0ea"
    result = "421b5eb2-a5ee-d3f9-6a2c-ffed80afb0ea"
}

# random_uuid.id2:
resource "random_uuid" "id2" {
    id     = "2c6809a9-a7eb-d87c-eaea-d8ca77af113f"
    result = "2c6809a9-a7eb-d87c-eaea-d8ca77af113f"
}

# random_uuid.id3:
resource "random_uuid" "id3" {
    id     = "6431760f-57e0-65a3-2d33-6d6596f6e6f9"
    result = "6431760f-57e0-65a3-2d33-6d6596f6e6f9"
}

# random_uuid.id4:
resource "random_uuid" "id4" {
    id     = "318a75c2-8c00-f6fb-3a8b-c94b2985d1b7"
    result = "318a75c2-8c00-f6fb-3a8b-c94b2985d1b7"
}

# random_uuid.id5:
resource "random_uuid" "id5" {
    id     = "81e14361-03ca-1dff-648b-4cb2ba5363e1"
    result = "81e14361-03ca-1dff-648b-4cb2ba5363e1"
}

# random_uuid.id6:
resource "random_uuid" "id6" {
    id     = "1f652882-1d2f-da79-eabb-488abd3571bf"
    result = "1f652882-1d2f-da79-eabb-488abd3571bf"
}

# random_uuid.id7:
resource "random_uuid" "id7" {
    id     = "bf63ec1f-da38-8888-63e8-32f101f88fe5"
    result = "bf63ec1f-da38-8888-63e8-32f101f88fe5"
}


Outputs:

id1 = "421b5eb2-a5ee-d3f9-6a2c-ffed80afb0ea"
id2 = "2c6809a9-a7eb-d87c-eaea-d8ca77af113f"
id3 = "6431760f-57e0-65a3-2d33-6d6596f6e6f9"
id4 = "318a75c2-8c00-f6fb-3a8b-c94b2985d1b7"
id5 = "81e14361-03ca-1dff-648b-4cb2ba5363e1"
id6 = "1f652882-1d2f-da79-eabb-488abd3571bf"
id7 = "bf63ec1f-da38-8888-63e8-32f101f88fe5"
order1 = 95208
order2 = 95208


root in ~/terraform-projects/data via 💠 default on ☁️  (us-east-1) 
❯ terraform output
id1 = "421b5eb2-a5ee-d3f9-6a2c-ffed80afb0ea"
id2 = "2c6809a9-a7eb-d87c-eaea-d8ca77af113f"
id3 = "6431760f-57e0-65a3-2d33-6d6596f6e6f9"
id4 = "318a75c2-8c00-f6fb-3a8b-c94b2985d1b7"
id5 = "81e14361-03ca-1dff-648b-4cb2ba5363e1"
id6 = "1f652882-1d2f-da79-eabb-488abd3571bf"
id7 = "bf63ec1f-da38-8888-63e8-32f101f88fe5"
order1 = 95208
order2 = 95208







root in ~/terraform-projects/output via 💠 default on ☁️  (us-east-1) 
❯ cat main.tf 
resource "random_pet" "my-pet" {

  length    = var.length 
}

output "pet-name" {

        value = random_pet.my-pet.id
        description = "Record the value of pet ID generated by the random_pet resource"
}

resource "local_file" "welcome" {
    filename = "/root/message.txt"
    content = "Welcome to Kodekloud."
}

output "welcome_message" {
  value =local_file.welcome.content
}





root in ~/terraform-projects/output via 💠 default on ☁️  (us-east-1) 
❯ terraform init

Initializing the backend...

Initializing provider plugins...
- Reusing previous version of hashicorp/random from the dependency lock file
- Reusing previous version of hashicorp/local from the dependency lock file
- Using previously-installed hashicorp/random v3.7.2
- Using previously-installed hashicorp/local v2.5.3

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

root in ~/terraform-projects/output via 💠 default on ☁️  (us-east-1) 





❯ terraform plan
random_pet.my-pet: Refreshing state... [id=lobster]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # local_file.welcome will be created
  + resource "local_file" "welcome" {
      + content              = "Welcome to Kodekloud."
      + content_base64sha256 = (known after apply)
      + content_base64sha512 = (known after apply)
      + content_md5          = (known after apply)
      + content_sha1         = (known after apply)
      + content_sha256       = (known after apply)
      + content_sha512       = (known after apply)
      + directory_permission = "0777"
      + file_permission      = "0777"
      + filename             = "/root/message.txt"
      + id                   = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + welcome_message = "Welcome to Kodekloud."

─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply"
now.





root in ~/terraform-projects/output via 💠 default on ☁️  (us-east-1) 
❯ terraform apply
random_pet.my-pet: Refreshing state... [id=lobster]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # local_file.welcome will be created
  + resource "local_file" "welcome" {
      + content              = "Welcome to Kodekloud."
      + content_base64sha256 = (known after apply)
      + content_base64sha512 = (known after apply)
      + content_md5          = (known after apply)
      + content_sha1         = (known after apply)
      + content_sha256       = (known after apply)
      + content_sha512       = (known after apply)
      + directory_permission = "0777"
      + file_permission      = "0777"
      + filename             = "/root/message.txt"
      + id                   = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + welcome_message = "Welcome to Kodekloud."

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

local_file.welcome: Creating...
local_file.welcome: Creation complete after 0s [id=d2d3e44fe87af01e8f96ec1b0e467845109264b2]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

Outputs:

pet-name = "lobster"
welcome_message = "Welcome to Kodekloud."







root in ~/terraform-projects/output via 💠 default on ☁️  (us-east-1) 
❯ terraform show
# local_file.welcome:
resource "local_file" "welcome" {
    content              = "Welcome to Kodekloud."
    content_base64sha256 = "Tol5u2J45Ip0yt61PMszLevjkE0zNK+kTJjdbPJE9Y8="
    content_base64sha512 = "drX8TKATWoPSKnJdxzjV98CPFW26pZRrhYophZhym9/8WVmz0x3llsvTGyCnubFqoUb/mhCXDq/IcMv6qcFFjw=="
    content_md5          = "bbb9fc312e76d626f80e3728916f8f04"
    content_sha1         = "d2d3e44fe87af01e8f96ec1b0e467845109264b2"
    content_sha256       = "4e8979bb6278e48a74cadeb53ccb332debe3904d3334afa44c98dd6cf244f58f"
    content_sha512       = "76b5fc4ca0135a83d22a725dc738d5f7c08f156dbaa5946b858a298598729bdffc5959b3d31de596cbd31b20a7b9b16aa146ff9a10970eafc870cbfaa9c1458f"
    directory_permission = "0777"
    file_permission      = "0777"
    filename             = "/root/message.txt"
    id                   = "d2d3e44fe87af01e8f96ec1b0e467845109264b2"
}

# random_pet.my-pet:
resource "random_pet" "my-pet" {
    id        = "lobster"
    length    = 1
    separator = "-"
}


Outputs:

pet-name = "lobster"
welcome_message = "Welcome to Kodekloud."

root in ~/terraform-projects/output via 💠 default on ☁️  (us-east-1) 
❯ terraform output 
pet-name = "lobster"
welcome_message = "Welcome to Kodekloud."



