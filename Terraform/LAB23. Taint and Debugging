root in ~/terraform-projects/ProjectA via 💠 default on ☁️  (us-east-1) 
❯ export TF_LOG=ERROR

root in ~/terraform-projects/ProjectA via 💠 default on ☁️  (us-east-1) 
❯ export TF_LOG_PATH=/tmp/ProjectA.log


root in ~/terraform-projects/ProjectB via 💠 default on ☁️  (us-east-1) 
❯ cat provider.tf 
terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "4.15.0"
    }
  }
}

provider "aws" {
  region                      = "ca-central-1"
  skip_credentials_validation = true
  skip_requesting_account_id  = true

  endpoints {
    ec2                       = "http://aws:4566"
  }
}

root in ~/terraform-projects/ProjectB via 💠 default on ☁️  (us-east-1) 
❯ terraform init 

Initializing the backend...

Initializing provider plugins...
- Finding hashicorp/aws versions matching "4.15.0"...
- Installing hashicorp/aws v4.15.0...
- Installed hashicorp/aws v4.15.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

root in ~/terraform-projects/ProjectB via 💠 default on ☁️  (us-east-1) took 3s 
❯ terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.ProjectB will be created
  + resource "aws_instance" "ProjectB" {
      + ami                                  = "ami-0c9bfc21ac5bf10eb"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.large"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Description" = "Oversized Webserver"
          + "Name"        = "projectb_webserver"
        }
      + tags_all                             = {
          + "Description" = "Oversized Webserver"
          + "Name"        = "projectb_webserver"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_instance.ProjectB: Creating...
aws_instance.ProjectB: Still creating... [10s elapsed]
aws_instance.ProjectB: Creation complete after 10s [id=i-2934e6ec477a4f2f9]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.


root in /tmp on ☁️  (us-east-1) 
❯ cat ProjectA.log 
2025-07-24T06:33:17.504Z [ERROR] vertex "aws_instance.ProjectA" error: creating EC2 Instance: AuthFailure: AWS was not able to validate the provided access credentials
        status code: 401, request id: 1ace0816-8075-4b91-97cb-d1295af4f1df







root in ~/terraform-projects/ProjectB via 💠 default on ☁️  (us-east-1) took 20s 
❯ terraform plan
aws_instance.ProjectB: Refreshing state... [id=i-2934e6ec477a4f2f9]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
-/+ destroy and then create replacement

Terraform will perform the following actions:

  # aws_instance.ProjectB is tainted, so must be replaced
-/+ resource "aws_instance" "ProjectB" {
      ~ arn                                  = "arn:aws:ec2:ca-central-1::instance/i-2934e6ec477a4f2f9" -> (known after apply)
      ~ associate_public_ip_address          = true -> (known after apply)
      ~ availability_zone                    = "ca-central-1a" -> (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      ~ disable_api_termination              = false -> (known after apply)
      ~ ebs_optimized                        = false -> (known after apply)
      - hibernation                          = false -> null
      + host_id                              = (known after apply)
      ~ id                                   = "i-2934e6ec477a4f2f9" -> (known after apply)
      ~ instance_initiated_shutdown_behavior = "stop" -> (known after apply)
      ~ instance_state                       = "running" -> (known after apply)
      ~ ipv6_address_count                   = 0 -> (known after apply)
      ~ ipv6_addresses                       = [] -> (known after apply)
      + key_name                             = (known after apply)
      ~ monitoring                           = false -> (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      ~ primary_network_interface_id         = "eni-d0819f60" -> (known after apply)
      ~ private_dns                          = "ip-10-237-47-108.ca-central-1.compute.internal" -> (known after apply)
      ~ private_ip                           = "10.237.47.108" -> (known after apply)
      ~ public_dns                           = "ec2-54-214-97-113.ca-central-1.compute.amazonaws.com" -> (known after apply)
      ~ public_ip                            = "54.214.97.113" -> (known after apply)
      ~ secondary_private_ips                = [] -> (known after apply)
      ~ security_groups                      = [] -> (known after apply)
      ~ subnet_id                            = "subnet-0a2d0a55" -> (known after apply)
        tags                                 = {
            "Description" = "Oversized Webserver"
            "Name"        = "projectb_webserver"
        }
      ~ tenancy                              = "default" -> (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      ~ vpc_security_group_ids               = [] -> (known after apply)
        # (6 unchanged attributes hidden)

      - credit_specification {
          - cpu_credits = "standard" -> null
        }

      - root_block_device {
          - delete_on_termination = true -> null
          - device_name           = "/dev/sda1" -> null
          - encrypted             = false -> null
          - iops                  = 0 -> null
          - tags                  = {} -> null
          - throughput            = 0 -> null
          - volume_id             = "vol-c53aabfc" -> null
          - volume_size           = 8 -> null
          - volume_type           = "gp2" -> null
        }
    }

Plan: 1 to add, 0 to change, 1 to destroy.

─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply"
now.




root in ~/terraform-projects/ProjectB via 💠 default on ☁️  (us-east-1) took 3s 
❯ terraform untaint aws_instance.ProjectB
Resource instance aws_instance.ProjectB has been successfully untainted.



root in ~/terraform-projects/ProjectB via 💠 default on ☁️  (us-east-1) 
❯ terraform plan
aws_instance.ProjectB: Refreshing state... [id=i-2934e6ec477a4f2f9]

No changes. Your infrastructure matches the configuration.

Terraform has compared your real infrastructure against your configuration and found no differences, so no changes are needed.

