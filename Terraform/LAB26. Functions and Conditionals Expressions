root in ~/terraform-projects on ☁️  (us-east-1) 
❯ terraform console 
> floor(10.9)
10
  

> title("user-generated password file")
"User-Generated Password File"


root in ~/terraform-projects/project-sonic via 💠 default on ☁️  (us-east-1) 
❯ terraform console 
> index(var.sf,"oni")
7




root in ~/terraform-projects/project-sonic via 💠 default on ☁️  (us-east-1) 
❯ cat variables.tf 
variable "region" {
  default = "ca-central-1"
}
variable "cloud_users" {
     type = string
     default = "andrew:ken:faraz:mutsumi:peter:steve:braja"
  
}
variable "bucket" {
  default = "sonic-media"
  
}

variable "media" {
  type = set(string)
  default = [ 
    "/media/tails.jpg",
    "/media/eggman.jpg",
    "/media/ultrasonic.jpg",
    "/media/knuckles.jpg",
    "/media/shadow.jpg",
      ]
  
}
variable "sf" {
  type = list
  default = [
    "ryu",
    "ken",
    "akuma",
    "seth",
    "zangief",
    "poison",
    "gen",
    "oni",
    "thawk",
    "fang",
    "rashid",
    "birdie",
    "sagat",
    "bison",
    "cammy",
    "chun-li",
    "balrog",
    "cody",
    "rolento",
    "ibuki"

  ]
}








root in ~/terraform-projects/project-sonic via 💠 default on ☁️  (us-east-1) 
❯ cat main.tf 
resource "aws_iam_user" "cloud" {
     name = split(":",var.cloud_users)[count.index]
     count = length(split(":",var.cloud_users))

}
root in ~/terraform-projects/project-sonic via 💠 default on ☁️  (us-east-1) 
❯ terraform init

Initializing the backend...

Initializing provider plugins...
- Finding hashicorp/aws versions matching "4.15.0"...
- Installing hashicorp/aws v4.15.0...
- Installed hashicorp/aws v4.15.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

root in ~/terraform-projects/project-sonic via 💠 default on ☁️  (us-east-1) took 4s 
❯ terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_iam_user.cloud[0] will be created
  + resource "aws_iam_user" "cloud" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "andrew"
      + path          = "/"
      + tags_all      = (known after apply)
      + unique_id     = (known after apply)
    }

  # aws_iam_user.cloud[1] will be created
  + resource "aws_iam_user" "cloud" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "ken"
      + path          = "/"
      + tags_all      = (known after apply)
      + unique_id     = (known after apply)
    }

  # aws_iam_user.cloud[2] will be created
  + resource "aws_iam_user" "cloud" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "faraz"
      + path          = "/"
      + tags_all      = (known after apply)
      + unique_id     = (known after apply)
    }

  # aws_iam_user.cloud[3] will be created
  + resource "aws_iam_user" "cloud" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "mutsumi"
      + path          = "/"
      + tags_all      = (known after apply)
      + unique_id     = (known after apply)
    }

  # aws_iam_user.cloud[4] will be created
  + resource "aws_iam_user" "cloud" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "peter"
      + path          = "/"
      + tags_all      = (known after apply)
      + unique_id     = (known after apply)
    }

  # aws_iam_user.cloud[5] will be created
  + resource "aws_iam_user" "cloud" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "steve"
      + path          = "/"
      + tags_all      = (known after apply)
      + unique_id     = (known after apply)
    }

  # aws_iam_user.cloud[6] will be created
  + resource "aws_iam_user" "cloud" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "braja"
      + path          = "/"
      + tags_all      = (known after apply)
      + unique_id     = (known after apply)
    }

Plan: 7 to add, 0 to change, 0 to destroy.

─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply"
now.

root in ~/terraform-projects/project-sonic via 💠 default on ☁️  (us-east-1) took 5s 
❯ terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_iam_user.cloud[0] will be created
  + resource "aws_iam_user" "cloud" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "andrew"
      + path          = "/"
      + tags_all      = (known after apply)
      + unique_id     = (known after apply)
    }

  # aws_iam_user.cloud[1] will be created
  + resource "aws_iam_user" "cloud" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "ken"
      + path          = "/"
      + tags_all      = (known after apply)
      + unique_id     = (known after apply)
    }

  # aws_iam_user.cloud[2] will be created
  + resource "aws_iam_user" "cloud" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "faraz"
      + path          = "/"
      + tags_all      = (known after apply)
      + unique_id     = (known after apply)
    }

  # aws_iam_user.cloud[3] will be created
  + resource "aws_iam_user" "cloud" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "mutsumi"
      + path          = "/"
      + tags_all      = (known after apply)
      + unique_id     = (known after apply)
    }

  # aws_iam_user.cloud[4] will be created
  + resource "aws_iam_user" "cloud" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "peter"
      + path          = "/"
      + tags_all      = (known after apply)
      + unique_id     = (known after apply)
    }

  # aws_iam_user.cloud[5] will be created
  + resource "aws_iam_user" "cloud" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "steve"
      + path          = "/"
      + tags_all      = (known after apply)
      + unique_id     = (known after apply)
    }

  # aws_iam_user.cloud[6] will be created
  + resource "aws_iam_user" "cloud" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "braja"
      + path          = "/"
      + tags_all      = (known after apply)
      + unique_id     = (known after apply)
    }

Plan: 7 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_iam_user.cloud[2]: Creating...
aws_iam_user.cloud[4]: Creating...
aws_iam_user.cloud[0]: Creating...
aws_iam_user.cloud[3]: Creating...
aws_iam_user.cloud[5]: Creating...
aws_iam_user.cloud[6]: Creating...
aws_iam_user.cloud[1]: Creating...
aws_iam_user.cloud[3]: Creation complete after 0s [id=mutsumi]
aws_iam_user.cloud[5]: Creation complete after 0s [id=steve]
aws_iam_user.cloud[0]: Creation complete after 0s [id=andrew]
aws_iam_user.cloud[4]: Creation complete after 0s [id=peter]
aws_iam_user.cloud[6]: Creation complete after 0s [id=braja]
aws_iam_user.cloud[2]: Creation complete after 0s [id=faraz]
aws_iam_user.cloud[1]: Creation complete after 0s [id=ken]

Apply complete! Resources: 7 added, 0 changed, 0 destroyed.

root in ~/terraform-projects/project-sonic via 💠 default on ☁️  (us-east-1) took 5s 
❯ terraform state list
aws_iam_user.cloud[0]
aws_iam_user.cloud[1]
aws_iam_user.cloud[2]
aws_iam_user.cloud[3]
aws_iam_user.cloud[4]
aws_iam_user.cloud[5]
aws_iam_user.cloud[6]










root in ~/terraform-projects/project-sonic via 💠 default on ☁️  (us-east-1) took 9m38s 
❯ cat main.tf 
resource "aws_iam_user" "cloud" {
     name = split(":",var.cloud_users)[count.index]
     count = length(split(":",var.cloud_users))
  
}
resource "aws_s3_bucket" "sonic_media" {
     bucket = var.bucket
  
}

resource "aws_s3_object" "upload_sonic_media" {
  bucket="${aws_s3_bucket.sonic_media.bucket}"
  for_each = var.media
  key=substr(each.value,7,20)
  source = each.value
}

root in ~/terraform-projects/project-sonic via 💠 default on ☁️  (us-east-1) 
❯ terraform apply 
aws_iam_user.cloud[5]: Refreshing state... [id=steve]
aws_iam_user.cloud[4]: Refreshing state... [id=peter]
aws_iam_user.cloud[1]: Refreshing state... [id=ken]
aws_iam_user.cloud[2]: Refreshing state... [id=faraz]
aws_iam_user.cloud[6]: Refreshing state... [id=braja]
aws_iam_user.cloud[3]: Refreshing state... [id=mutsumi]
aws_iam_user.cloud[0]: Refreshing state... [id=andrew]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_s3_bucket.sonic_media will be created
  + resource "aws_s3_bucket" "sonic_media" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "sonic-media"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags_all                    = (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)
    }

  # aws_s3_object.upload_sonic_media["/media/eggman.jpg"] will be created
  + resource "aws_s3_object" "upload_sonic_media" {
      + acl                    = "private"
      + bucket                 = "sonic-media"
      + bucket_key_enabled     = (known after apply)
      + content_type           = (known after apply)
      + etag                   = (known after apply)
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "eggman.jpg"
      + kms_key_id             = (known after apply)
      + server_side_encryption = (known after apply)
      + source                 = "/media/eggman.jpg"
      + storage_class          = (known after apply)
      + tags_all               = (known after apply)
      + version_id             = (known after apply)
    }

  # aws_s3_object.upload_sonic_media["/media/knuckles.jpg"] will be created
  + resource "aws_s3_object" "upload_sonic_media" {
      + acl                    = "private"
      + bucket                 = "sonic-media"
      + bucket_key_enabled     = (known after apply)
      + content_type           = (known after apply)
      + etag                   = (known after apply)
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "knuckles.jpg"
      + kms_key_id             = (known after apply)
      + server_side_encryption = (known after apply)
      + source                 = "/media/knuckles.jpg"
      + storage_class          = (known after apply)
      + tags_all               = (known after apply)
      + version_id             = (known after apply)
    }

  # aws_s3_object.upload_sonic_media["/media/shadow.jpg"] will be created
  + resource "aws_s3_object" "upload_sonic_media" {
      + acl                    = "private"
      + bucket                 = "sonic-media"
      + bucket_key_enabled     = (known after apply)
      + content_type           = (known after apply)
      + etag                   = (known after apply)
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "shadow.jpg"
      + kms_key_id             = (known after apply)
      + server_side_encryption = (known after apply)
      + source                 = "/media/shadow.jpg"
      + storage_class          = (known after apply)
      + tags_all               = (known after apply)
      + version_id             = (known after apply)
    }

  # aws_s3_object.upload_sonic_media["/media/tails.jpg"] will be created
  + resource "aws_s3_object" "upload_sonic_media" {
      + acl                    = "private"
      + bucket                 = "sonic-media"
      + bucket_key_enabled     = (known after apply)
      + content_type           = (known after apply)
      + etag                   = (known after apply)
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "tails.jpg"
      + kms_key_id             = (known after apply)
      + server_side_encryption = (known after apply)
      + source                 = "/media/tails.jpg"
      + storage_class          = (known after apply)
      + tags_all               = (known after apply)
      + version_id             = (known after apply)
    }

  # aws_s3_object.upload_sonic_media["/media/ultrasonic.jpg"] will be created
  + resource "aws_s3_object" "upload_sonic_media" {
      + acl                    = "private"
      + bucket                 = "sonic-media"
      + bucket_key_enabled     = (known after apply)
      + content_type           = (known after apply)
      + etag                   = (known after apply)
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "ultrasonic.jpg"
      + kms_key_id             = (known after apply)
      + server_side_encryption = (known after apply)
      + source                 = "/media/ultrasonic.jpg"
      + storage_class          = (known after apply)
      + tags_all               = (known after apply)
      + version_id             = (known after apply)
    }

Plan: 6 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_s3_bucket.sonic_media: Creating...
aws_s3_bucket.sonic_media: Creation complete after 1s [id=sonic-media]
aws_s3_object.upload_sonic_media["/media/ultrasonic.jpg"]: Creating...
aws_s3_object.upload_sonic_media["/media/knuckles.jpg"]: Creating...
aws_s3_object.upload_sonic_media["/media/tails.jpg"]: Creating...
aws_s3_object.upload_sonic_media["/media/eggman.jpg"]: Creating...
aws_s3_object.upload_sonic_media["/media/shadow.jpg"]: Creating...
aws_s3_object.upload_sonic_media["/media/knuckles.jpg"]: Creation complete after 0s [id=knuckles.jpg]
aws_s3_object.upload_sonic_media["/media/ultrasonic.jpg"]: Creation complete after 0s [id=ultrasonic.jpg]
aws_s3_object.upload_sonic_media["/media/tails.jpg"]: Creation complete after 0s [id=tails.jpg]
aws_s3_object.upload_sonic_media["/media/eggman.jpg"]: Creation complete after 0s [id=eggman.jpg]
aws_s3_object.upload_sonic_media["/media/shadow.jpg"]: Creation complete after 0s [id=shadow.jpg]

Apply complete! Resources: 6 added, 0 changed, 0 destroyed.

root in ~/terraform-projects/project-sonic via 💠 default on ☁️  (us-east-1) took 7s 
❯ terraform show
# aws_iam_user.cloud[0]:
resource "aws_iam_user" "cloud" {
    arn           = "arn:aws:iam::000000000000:user/andrew"
    force_destroy = false
    id            = "andrew"
    name          = "andrew"
    path          = "/"
    tags          = {}
    tags_all      = {}
    unique_id     = "lwu2x3yctjyza1p4uitl"
}

# aws_iam_user.cloud[1]:
resource "aws_iam_user" "cloud" {
    arn           = "arn:aws:iam::000000000000:user/ken"
    force_destroy = false
    id            = "ken"
    name          = "ken"
    path          = "/"
    tags          = {}
    tags_all      = {}
    unique_id     = "paqgjsfw4ema4khwnw5y"
}

# aws_iam_user.cloud[2]:
resource "aws_iam_user" "cloud" {
    arn           = "arn:aws:iam::000000000000:user/faraz"
    force_destroy = false
    id            = "faraz"
    name          = "faraz"
    path          = "/"
    tags          = {}
    tags_all      = {}
    unique_id     = "wk9vmexf06sns43ywtfv"
}

# aws_iam_user.cloud[3]:
resource "aws_iam_user" "cloud" {
    arn           = "arn:aws:iam::000000000000:user/mutsumi"
    force_destroy = false
    id            = "mutsumi"
    name          = "mutsumi"
    path          = "/"
    tags          = {}
    tags_all      = {}
    unique_id     = "vram0pxs7r0kq5slbm71"
}

# aws_iam_user.cloud[4]:
resource "aws_iam_user" "cloud" {
    arn           = "arn:aws:iam::000000000000:user/peter"
    force_destroy = false
    id            = "peter"
    name          = "peter"
    path          = "/"
    tags          = {}
    tags_all      = {}
    unique_id     = "wq6wcrrbe9z44wb9lr1k"
}

# aws_iam_user.cloud[5]:
resource "aws_iam_user" "cloud" {
    arn           = "arn:aws:iam::000000000000:user/steve"
    force_destroy = false
    id            = "steve"
    name          = "steve"
    path          = "/"
    tags          = {}
    tags_all      = {}
    unique_id     = "o64hqj8ijngl59qsh0w0"
}

# aws_iam_user.cloud[6]:
resource "aws_iam_user" "cloud" {
    arn           = "arn:aws:iam::000000000000:user/braja"
    force_destroy = false
    id            = "braja"
    name          = "braja"
    path          = "/"
    tags          = {}
    tags_all      = {}
    unique_id     = "9bny24lymayibu29ta6j"
}

# aws_s3_bucket.sonic_media:
resource "aws_s3_bucket" "sonic_media" {
    arn                         = "arn:aws:s3:::sonic-media"
    bucket                      = "sonic-media"
    bucket_domain_name          = "sonic-media.s3.amazonaws.com"
    bucket_regional_domain_name = "sonic-media.s3.ca-central-1.amazonaws.com"
    force_destroy               = false
    hosted_zone_id              = "Z1QDHH18159H29"
    id                          = "sonic-media"
    object_lock_enabled         = false
    region                      = "ca-central-1"
    request_payer               = "BucketOwner"
    tags_all                    = {}

    grant {
        id          = "75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a"
        permissions = [
            "FULL_CONTROL",
        ]
        type        = "CanonicalUser"
    }

    server_side_encryption_configuration {
        rule {
            bucket_key_enabled = false

            apply_server_side_encryption_by_default {
                sse_algorithm = "AES256"
            }
        }
    }

    versioning {
        enabled    = false
        mfa_delete = false
    }
}

# aws_s3_object.upload_sonic_media["/media/eggman.jpg"]:
resource "aws_s3_object" "upload_sonic_media" {
    acl                    = "private"
    bucket                 = "sonic-media"
    bucket_key_enabled     = false
    content_type           = "binary/octet-stream"
    etag                   = "d41d8cd98f00b204e9800998ecf8427e"
    force_destroy          = false
    id                     = "eggman.jpg"
    key                    = "eggman.jpg"
    server_side_encryption = "AES256"
    source                 = "/media/eggman.jpg"
    storage_class          = "STANDARD"
    tags_all               = {}
}

# aws_s3_object.upload_sonic_media["/media/knuckles.jpg"]:
resource "aws_s3_object" "upload_sonic_media" {
    acl                    = "private"
    bucket                 = "sonic-media"
    bucket_key_enabled     = false
    content_type           = "binary/octet-stream"
    etag                   = "d41d8cd98f00b204e9800998ecf8427e"
    force_destroy          = false
    id                     = "knuckles.jpg"
    key                    = "knuckles.jpg"
    server_side_encryption = "AES256"
    source                 = "/media/knuckles.jpg"
    storage_class          = "STANDARD"
    tags_all               = {}
}

# aws_s3_object.upload_sonic_media["/media/shadow.jpg"]:
resource "aws_s3_object" "upload_sonic_media" {
    acl                    = "private"
    bucket                 = "sonic-media"
    bucket_key_enabled     = false
    content_type           = "binary/octet-stream"
    etag                   = "d41d8cd98f00b204e9800998ecf8427e"
    force_destroy          = false
    id                     = "shadow.jpg"
    key                    = "shadow.jpg"
    server_side_encryption = "AES256"
    source                 = "/media/shadow.jpg"
    storage_class          = "STANDARD"
    tags_all               = {}
}

# aws_s3_object.upload_sonic_media["/media/tails.jpg"]:
resource "aws_s3_object" "upload_sonic_media" {
    acl                    = "private"
    bucket                 = "sonic-media"
    bucket_key_enabled     = false
    content_type           = "binary/octet-stream"
    etag                   = "d41d8cd98f00b204e9800998ecf8427e"
    force_destroy          = false
    id                     = "tails.jpg"
    key                    = "tails.jpg"
    server_side_encryption = "AES256"
    source                 = "/media/tails.jpg"
    storage_class          = "STANDARD"
    tags_all               = {}
}

# aws_s3_object.upload_sonic_media["/media/ultrasonic.jpg"]:
resource "aws_s3_object" "upload_sonic_media" {
    acl                    = "private"
    bucket                 = "sonic-media"
    bucket_key_enabled     = false
    content_type           = "binary/octet-stream"
    etag                   = "d41d8cd98f00b204e9800998ecf8427e"
    force_destroy          = false
    id                     = "ultrasonic.jpg"
    key                    = "ultrasonic.jpg"
    server_side_encryption = "AES256"
    source                 = "/media/ultrasonic.jpg"
    storage_class          = "STANDARD"
    tags_all               = {}
}

root in ~/terraform-projects/project-sonic via 💠 default on ☁️  (us-east-1) took 2s 
❯ terraform state list
aws_iam_user.cloud[0]
aws_iam_user.cloud[1]
aws_iam_user.cloud[2]
aws_iam_user.cloud[3]
aws_iam_user.cloud[4]
aws_iam_user.cloud[5]
aws_iam_user.cloud[6]
aws_s3_bucket.sonic_media
aws_s3_object.upload_sonic_media["/media/eggman.jpg"]
aws_s3_object.upload_sonic_media["/media/knuckles.jpg"]
aws_s3_object.upload_sonic_media["/media/shadow.jpg"]
aws_s3_object.upload_sonic_media["/media/tails.jpg"]
aws_s3_object.upload_sonic_media["/media/ultrasonic.jpg"]














root in ~/terraform-projects/project-mario via 💠 default on ☁️  (us-east-1) 
❯ cat main.tf 
resource "aws_instance" "mario_servers" {
     ami = var.ami
     instance_type = var.name == "tiny" ? var.small : var.large
     tags = {
          Name = var.name

     }

}
root in ~/terraform-projects/project-mario via 💠 default on ☁️  (us-east-1) 
❯ cat variables.tf 
variable "region" {
    default = "us-east-1"
}
variable  "name" {
    type = string
}
variable "ami" {
    type = string
    default = "ami-09331245601cf"
}
variable "small" {
    type = string
    default = "t2.nano"
}
variable "large" {
    type = string
    default = "t2.2xlarge"
}

root in ~/terraform-projects/project-mario via 💠 default on ☁️  (us-east-1) 
❯ cat provider.tf 
terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "4.15.0"
    }
  }
}

provider "aws" {
  region                      = var.region
  skip_credentials_validation = true
  skip_requesting_account_id  = true
  s3_use_path_style = true
  endpoints {
    ec2 = "http://aws:4566"
    iam = "http://aws:4566"
    s3 = "http://aws:4566"
  }
}

root in ~/terraform-projects/project-mario via 💠 default on ☁️  (us-east-1) 
❯ root in ~/terraform-projects/project-mario via 💠 default on ☁️  (us-east-1) 
❯ terraform init

Initializing the backend...

Initializing provider plugins...
- Reusing previous version of hashicorp/aws from the dependency lock file
- Using previously-installed hashicorp/aws v4.15.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.



root in ~/terraform-projects/project-mario via 💠 default on ☁️  (us-east-1) took 2s 
❯ terraform apply
var.name
  Enter a value: yes


Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.mario_servers will be created
  + resource "aws_instance" "mario_servers" {
      + ami                                  = "ami-09331245601cf"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.2xlarge"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "yes"
        }
      + tags_all                             = {
          + "Name" = "yes"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_instance.mario_servers: Creating...
aws_instance.mario_servers: Still creating... [10s elapsed]
aws_instance.mario_servers: Creation complete after 10s [id=i-b3819064be5fe6c05]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

root in ~/terraform-projects/project-mario via 💠 default on ☁️  (us-east-1) took 17s 
❯ terraform state list
aws_instance.mario_servers

root in ~/terraform-projects/project-mario via 💠 default on ☁️  (us-east-1) 
❯ terraform show
# aws_instance.mario_servers:
resource "aws_instance" "mario_servers" {
    ami                                  = "ami-09331245601cf"
    arn                                  = "arn:aws:ec2:us-east-1::instance/i-b3819064be5fe6c05"
    associate_public_ip_address          = true
    availability_zone                    = "us-east-1a"
    disable_api_termination              = false
    ebs_optimized                        = false
    get_password_data                    = false
    hibernation                          = false
    id                                   = "i-b3819064be5fe6c05"
    instance_initiated_shutdown_behavior = "stop"
    instance_state                       = "running"
    instance_type                        = "t2.2xlarge"
    ipv6_address_count                   = 0
    ipv6_addresses                       = []
    monitoring                           = false
    primary_network_interface_id         = "eni-85d02aa0"
    private_dns                          = "ip-10-250-50-46.ec2.internal"
    private_ip                           = "10.250.50.46"
    public_dns                           = "ec2-54-214-206-177.compute-1.amazonaws.com"
    public_ip                            = "54.214.206.177"
    secondary_private_ips                = []
    security_groups                      = []
    source_dest_check                    = true
    subnet_id                            = "subnet-22839432"
    tags                                 = {
        "Name" = "yes"
    }
    tags_all                             = {
        "Name" = "yes"
    }
    tenancy                              = "default"
    user_data_replace_on_change          = false
    vpc_security_group_ids               = []

    credit_specification {
        cpu_credits = "standard"
    }

    root_block_device {
        delete_on_termination = true
        device_name           = "/dev/sda1"
        encrypted             = false
        iops                  = 0
        tags                  = {}
        throughput            = 0
        volume_id             = "vol-ed6c1c5f"
        volume_size           = 8
        volume_type           = "gp2"
    }
}

root in ~/terraform-projects/project-mario via 💠 default on ☁️  (us-east-1) took 3s 
❯ 
