root in ~/terraform-projects/RemoteState via 💠 default on ☁️  (us-east-1) 
❯ cat main.tf 
resource "local_file" "state" {
  filename = "/root/${var.local-state}"
  content = "This configuration uses ${var.local-state} state"
}




root in ~/terraform-projects/RemoteState via 💠 default on ☁️  (us-east-1) 
❯ cat variables.tf 
variable remote-state {
    type = string
    default = "remote"
}
variable local-state {
    type = string
    default = "local"
}




root in ~/terraform-projects/RemoteState via 💠 default on ☁️  (us-east-1) 
❯ terraform init

Initializing the backend...

Initializing provider plugins...
- Finding latest version of hashicorp/local...
- Installing hashicorp/local v2.5.3...
- Installed hashicorp/local v2.5.3 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.







root in ~/terraform-projects/RemoteState via 💠 default on ☁️  (us-east-1) 
❯ terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # local_file.state will be created
  + resource "local_file" "state" {
      + content              = "This configuration uses local state"
      + content_base64sha256 = (known after apply)
      + content_base64sha512 = (known after apply)
      + content_md5          = (known after apply)
      + content_sha1         = (known after apply)
      + content_sha256       = (known after apply)
      + content_sha512       = (known after apply)
      + directory_permission = "0777"
      + file_permission      = "0777"
      + filename             = "/root/local"
      + id                   = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply"
now.





root in ~/terraform-projects/RemoteState via 💠 default on ☁️  (us-east-1) 
❯ terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # local_file.state will be created
  + resource "local_file" "state" {
      + content              = "This configuration uses local state"
      + content_base64sha256 = (known after apply)
      + content_base64sha512 = (known after apply)
      + content_md5          = (known after apply)
      + content_sha1         = (known after apply)
      + content_sha256       = (known after apply)
      + content_sha512       = (known after apply)
      + directory_permission = "0777"
      + file_permission      = "0777"
      + filename             = "/root/local"
      + id                   = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

local_file.state: Creating...
local_file.state: Creation complete after 0s [id=99de5213106b107b32de19315d0e794b2e3d6a03]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.




root in ~/terraform-projects/RemoteState via 💠 default on ☁️  (us-east-1) 
❯ cat terraform.tfstate
{
  "version": 4,
  "terraform_version": "1.5.0",
  "serial": 4,
  "lineage": "63bb4c07-dd85-e97f-6940-b5021981ca25",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "local_file",
      "name": "state",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "This configuration uses local state",
            "content_base64": null,
            "content_base64sha256": "EadRGSieprfRi2jn/lXRx96BUFWjJQNo5Svgv2f3Mfs=",
            "content_base64sha512": "5RFtQLnFIVWO7oq6zLTusCCXe3g5R4shz8LQHwNTz4FtWedkdVrZ2I+Hx4ebJwzbbwI6U9pgYjNMokw+jb88BQ==",
            "content_md5": "0d96cf150823d3be3c8fe97631e7f30f",
            "content_sha1": "af887e99a1ab7b1fdef03e4849d3f5c99d0dc91c",
            "content_sha256": "11a75119289ea6b7d18b68e7fe55d1c7de815055a3250368e52be0bf67f731fb",
            "content_sha512": "e5116d40b9c521558eee8abaccb4eeb020977b7839478b21cfc2d01f0353cf816d59e764755ad9d88f87c7879b270cdb6f023a53da6062334ca24c3e8dbf3c05",
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "/root/local",
            "id": "af887e99a1ab7b1fdef03e4849d3f5c99d0dc91c",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_attributes": []
        }
      ]
    }
  ],
  "check_results": null
}





root in ~/terraform-projects/RemoteState via 💠 default on ☁️  (us-east-1) 
❯ cat main.tf 
resource "local_file" "state" {
  filename = "/root/${var.remote-state}"
  content = "This configuration uses ${var.remote-state} state"
}
root in ~/terraform-projects/RemoteState via 💠 default on ☁️  (us-east-1) 
❯ cat variables.tf 
variable remote-state {
    type = string
    default = "remote"
}
variable local-state {
    type = string
    default = "local"
}


root in ~/terraform-projects/RemoteState via 💠 default on ☁️  (us-east-1) 
❯ terraform plan
local_file.state: Refreshing state... [id=af887e99a1ab7b1fdef03e4849d3f5c99d0dc91c]

Terraform used the selected providers to generate the following execution plan. Resource actions are
indicated with the following symbols:
-/+ destroy and then create replacement

Terraform will perform the following actions:

  # local_file.state must be replaced
-/+ resource "local_file" "state" {
      ~ content              = "This configuration uses local state" -> "This configuration uses remote state" # forces replacement
      ~ content_base64sha256 = "EadRGSieprfRi2jn/lXRx96BUFWjJQNo5Svgv2f3Mfs=" -> (known after apply)
      ~ content_base64sha512 = "5RFtQLnFIVWO7oq6zLTusCCXe3g5R4shz8LQHwNTz4FtWedkdVrZ2I+Hx4ebJwzbbwI6U9pgYjNMokw+jb88BQ==" -> (known after apply)
      ~ content_md5          = "0d96cf150823d3be3c8fe97631e7f30f" -> (known after apply)
      ~ content_sha1         = "af887e99a1ab7b1fdef03e4849d3f5c99d0dc91c" -> (known after apply)
      ~ content_sha256       = "11a75119289ea6b7d18b68e7fe55d1c7de815055a3250368e52be0bf67f731fb" -> (known after apply)
      ~ content_sha512       = "e5116d40b9c521558eee8abaccb4eeb020977b7839478b21cfc2d01f0353cf816d59e764755ad9d88f87c7879b270cdb6f023a53da6062334ca24c3e8dbf3c05" -> (known after apply)
      ~ filename             = "/root/local" -> "/root/remote" # forces replacement
      ~ id                   = "af887e99a1ab7b1fdef03e4849d3f5c99d0dc91c" -> (known after apply)
        # (2 unchanged attributes hidden)
    }

Plan: 1 to add, 0 to change, 1 to destroy.

──────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these
actions if you run "terraform apply" now.

root in ~/terraform-projects/RemoteState via 💠 default on ☁️  (us-east-1) 





❯ terraform apply
local_file.state: Refreshing state... [id=af887e99a1ab7b1fdef03e4849d3f5c99d0dc91c]

Terraform used the selected providers to generate the following execution plan. Resource actions are
indicated with the following symbols:
-/+ destroy and then create replacement

Terraform will perform the following actions:

  # local_file.state must be replaced
-/+ resource "local_file" "state" {
      ~ content              = "This configuration uses local state" -> "This configuration uses remote state" # forces replacement
      ~ content_base64sha256 = "EadRGSieprfRi2jn/lXRx96BUFWjJQNo5Svgv2f3Mfs=" -> (known after apply)
      ~ content_base64sha512 = "5RFtQLnFIVWO7oq6zLTusCCXe3g5R4shz8LQHwNTz4FtWedkdVrZ2I+Hx4ebJwzbbwI6U9pgYjNMokw+jb88BQ==" -> (known after apply)
      ~ content_md5          = "0d96cf150823d3be3c8fe97631e7f30f" -> (known after apply)
      ~ content_sha1         = "af887e99a1ab7b1fdef03e4849d3f5c99d0dc91c" -> (known after apply)
      ~ content_sha256       = "11a75119289ea6b7d18b68e7fe55d1c7de815055a3250368e52be0bf67f731fb" -> (known after apply)
      ~ content_sha512       = "e5116d40b9c521558eee8abaccb4eeb020977b7839478b21cfc2d01f0353cf816d59e764755ad9d88f87c7879b270cdb6f023a53da6062334ca24c3e8dbf3c05" -> (known after apply)
      ~ filename             = "/root/local" -> "/root/remote" # forces replacement
      ~ id                   = "af887e99a1ab7b1fdef03e4849d3f5c99d0dc91c" -> (known after apply)
        # (2 unchanged attributes hidden)
    }

Plan: 1 to add, 0 to change, 1 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

local_file.state: Destroying... [id=af887e99a1ab7b1fdef03e4849d3f5c99d0dc91c]
local_file.state: Destruction complete after 0s
local_file.state: Creating...
local_file.state: Creation complete after 0s [id=2d48160ec09ddaa56088de1b1dc3df9f8a28ec24]

Apply complete! Resources: 1 added, 0 changed, 1 destroyed.






root in ~/terraform-projects/RemoteState via 💠 default on ☁️  (us-east-1) 
❯ cat main.tf 
resource "local_file" "state" {
  filename = "/root/${var.remote-state}"
  content = "This configuration uses ${var.remote-state} state"
}
root in ~/terraform-projects/RemoteState via 💠 default on ☁️  (us-east-1) 
❯ cat variables.tf 
variable remote-state {
    type = string
    default = "remote"
}
variable local-state {
    type = string
    default = "local"
}
root in ~/terraform-projects/RemoteState via 💠 default on ☁️  (us-east-1) 
❯ cat terraform.tf
terraform {
  backend "s3" {
    key = "terraform.tfstate"
    region = "us-east-1"
    bucket = "remote-state"
   

    endpoint = "http://172.16.238.105:9000"
    force_path_style = true


    skip_credentials_validation = true

    skip_metadata_api_check = true
    skip_region_validation = true
  }
}


terraform.tfstate is now uploaded to S3 remote storage so can be removed locally!
