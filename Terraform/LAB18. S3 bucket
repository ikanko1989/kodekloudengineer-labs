root in terraform-projects/S3-Buckets/DC via 💠 default on ☁️  (us-east-1) 
❯ cat provider.tf 
terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "4.15.0"
    }
  }
}

provider "aws" {
  region                      = var.region
  s3_use_path_style = true
  skip_credentials_validation = true
  skip_requesting_account_id  = true

  endpoints {
    s3                       = "http://aws:4566"
  }
}



❯ cat terraform.tfvars 
region = "us-east-1"


❯ cat variables.tf 
variable "region" {
}


root in terraform-projects/S3-Buckets/DC via 💠 default on ☁️  (us-east-1) 
❯ cat main.tf 
resource "aws_s3_bucket" "dc_bucket" {
  bucket="dc-is-better-than-marvel"
}


root in terraform-projects/S3-Buckets/DC via 💠 default on ☁️  (us-east-1) took 9s 
❯ terraform init

Initializing the backend...

Initializing provider plugins...
- Reusing previous version of hashicorp/aws from the dependency lock file
- Using previously-installed hashicorp/aws v4.15.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

root in terraform-projects/S3-Buckets/DC via 💠 default on ☁️  (us-east-1) took 2s 
❯ terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_s3_bucket.dc_bucket will be created
  + resource "aws_s3_bucket" "dc_bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "dc-is-better-than-marvel"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags_all                    = (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform
apply" now.

root in terraform-projects/S3-Buckets/DC via 💠 default on ☁️  (us-east-1) took 4s 
❯ terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_s3_bucket.dc_bucket will be created
  + resource "aws_s3_bucket" "dc_bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "dc-is-better-than-marvel"
      + bucket_domain_name          = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags_all                    = (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes   

aws_s3_bucket.dc_bucket: Creating...
aws_s3_bucket.dc_bucket: Creation complete after 0s [id=dc-is-better-than-marvel]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

root in terraform-projects/S3-Buckets/DC via 💠 default on ☁️  (us-east-1) took 15s 
❯ terraform show
# aws_s3_bucket.dc_bucket:
resource "aws_s3_bucket" "dc_bucket" {
    arn                         = "arn:aws:s3:::dc-is-better-than-marvel"
    bucket                      = "dc-is-better-than-marvel"
    bucket_domain_name          = "dc-is-better-than-marvel.s3.amazonaws.com"
    bucket_regional_domain_name = "dc-is-better-than-marvel.s3.amazonaws.com"
    force_destroy               = false
    hosted_zone_id              = "Z3AQBSTGFYJSTF"
    id                          = "dc-is-better-than-marvel"
    object_lock_enabled         = false
    region                      = "us-east-1"
    request_payer               = "BucketOwner"
    tags_all                    = {}

    grant {
        id          = "75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a"
        permissions = [
            "FULL_CONTROL",
        ]
        type        = "CanonicalUser"
    }

    server_side_encryption_configuration {
        rule {
            bucket_key_enabled = false

            apply_server_side_encryption_by_default {
                sse_algorithm = "AES256"
            }
        }
    }

    versioning {
        enabled    = false
        mfa_delete = false
    }
}








root in terraform-projects/S3-Buckets/Pixar via 💠 default on ☁️  (us-east-1) 
❯ cat provider.tf 
terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "4.15.0"
    }
  }
}

provider "aws" {
  region                      = var.region
  s3_use_path_style = true
  skip_credentials_validation = true
  skip_requesting_account_id  = true

  endpoints {
    s3                       = "http://aws:4566"
  }
}

root in terraform-projects/S3-Buckets/Pixar via 💠 default on ☁️  (us-east-1) 
❯ cat terraform.tfvars 
region = "us-east-1"


root in terraform-projects/S3-Buckets/Pixar via 💠 default on ☁️  (us-east-1) 
❯ cat variables.tf 
variable "region" {
}

❯ cat main.tf 
resource "aws_s3_bucket_object" "upload" {
  bucket = "pixar-studios-2020"
  key = "woody.jpg"
  source = "/root/woody.jpg"
}


root in terraform-projects/S3-Buckets/Pixar via 💠 default on ☁️  (us-east-1) 
❯ terraform init

Initializing the backend...

Initializing provider plugins...
- Finding hashicorp/aws versions matching "4.15.0"...
- Installing hashicorp/aws v4.15.0...
- Installed hashicorp/aws v4.15.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.






root in terraform-projects/S3-Buckets/Pixar via 💠 default on ☁️  (us-east-1) took 3s 
❯ terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_s3_bucket_object.upload will be created
  + resource "aws_s3_bucket_object" "upload" {
      + acl                    = "private"
      + bucket                 = "pixar-studios-2020"
      + bucket_key_enabled     = (known after apply)
      + content_type           = (known after apply)
      + etag                   = (known after apply)
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "woody.jpg"
      + kms_key_id             = (known after apply)
      + server_side_encryption = (known after apply)
      + source                 = "/root/woody.jpg"
      + storage_class          = (known after apply)
      + tags_all               = (known after apply)
      + version_id             = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.
╷
│ Warning: Argument is deprecated
│ 
│   with aws_s3_bucket_object.upload,
│   on main.tf line 2, in resource "aws_s3_bucket_object" "upload":
│    2:   bucket = "pixar-studios-2020"
│ 
│ Use the aws_s3_object resource instead
│ 
│ (and 3 more similar warnings elsewhere)
╵

─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform
apply" now.







root in terraform-projects/S3-Buckets/Pixar via 💠 default on ☁️  (us-east-1) took 4s 
❯ terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_s3_bucket_object.upload will be created
  + resource "aws_s3_bucket_object" "upload" {
      + acl                    = "private"
      + bucket                 = "pixar-studios-2020"
      + bucket_key_enabled     = (known after apply)
      + content_type           = (known after apply)
      + etag                   = (known after apply)
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "woody.jpg"
      + kms_key_id             = (known after apply)
      + server_side_encryption = (known after apply)
      + source                 = "/root/woody.jpg"
      + storage_class          = (known after apply)
      + tags_all               = (known after apply)
      + version_id             = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.
╷
│ Warning: Argument is deprecated
│ 
│   with aws_s3_bucket_object.upload,
│   on main.tf line 2, in resource "aws_s3_bucket_object" "upload":
│    2:   bucket = "pixar-studios-2020"
│ 
│ Use the aws_s3_object resource instead
│ 
│ (and 3 more similar warnings elsewhere)
╵

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_s3_bucket_object.upload: Creating...
aws_s3_bucket_object.upload: Creation complete after 0s [id=woody.jpg]
╷
│ Warning: Argument is deprecated
│ 
│   with aws_s3_bucket_object.upload,
│   on main.tf line 2, in resource "aws_s3_bucket_object" "upload":
│    2:   bucket = "pixar-studios-2020"
│ 
│ Use the aws_s3_object resource instead
│ 
│ (and one more similar warning elsewhere)
╵

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.







root in terraform-projects/S3-Buckets/Pixar via 💠 default on ☁️  (us-east-1) took 7s 
❯ terraform show
# aws_s3_bucket_object.upload:
resource "aws_s3_bucket_object" "upload" {
    acl                    = "private"
    bucket                 = "pixar-studios-2020"
    bucket_key_enabled     = false
    content_type           = "binary/octet-stream"
    etag                   = "d134df2a93e3249d0a944bed29c4a0e4"
    force_destroy          = false
    id                     = "woody.jpg"
    key                    = "woody.jpg"
    server_side_encryption = "AES256"
    source                 = "/root/woody.jpg"
    storage_class          = "STANDARD"
    tags_all               = {}
}

