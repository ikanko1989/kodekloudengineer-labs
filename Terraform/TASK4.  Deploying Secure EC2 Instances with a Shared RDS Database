ðŸ§± Building the Infrastructure
Our web application will need a VPC, EC2 instances, and an RDS instance. We will define each of these components in our main.tf file.






Virtual Private Cloud (VPC)
A VPC is a virtual network dedicated to your AWS account. It is isolated from other virtual networks in the AWS cloud.

resource "aws_vpc" "app_vpc" {
  cidr_block = "10.0.0.0/16"
  enable_dns_support = true
  enable_dns_hostnames = true
  tags = {
    Name = "AppVPC"
  }
}






Subnets
Within the VPC, we create subnets. Each subnet resides in a different availability zone for high availability.

resource "aws_subnet" "app_subnet_1" {
  vpc_id            = aws_vpc.app_vpc.id
  cidr_block        = "10.0.1.0/24"
  availability_zone = "us-east-1a"
  tags = {
    Name = "AppSubnet1"
  }
}


resource "aws_subnet" "app_subnet_2" {
  vpc_id            = aws_vpc.app_vpc.id
  cidr_block        = "10.0.2.0/24"
  availability_zone = "us-east-1b"
  tags = {
    Name = "AppSubnet2"
  }
}




Security Groups
Security groups act as a virtual firewall for your instances to control inbound and outbound traffic.

resource "aws_security_group" "app_sg" {
  name        = "app_security_group"
  description = "Allow web traffic"
  vpc_id      = aws_vpc.app_vpc.id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "AppSecurityGroup"
  }
}







Elastic Compute Cloud (EC2)
EC2 instances will host our web application. We will create an instance within our VPC and associate it with the security group we defined.

resource "aws_instance" "app_instance" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"
  subnet_id     = aws_subnet.app_subnet_1.id
  security_groups = [aws_security_group.app_sg.name]

  tags = {
    Name = "AppInstance"
  }
}






Relational Database Service (RDS)
For data persistence, we will set up an RDS instance. It's managed by AWS, which simplifies database administration tasks such as backups and patching.

resource "aws_db_instance" "app_db" {
  allocated_storage    = 20
  storage_type         = "gp2"
  engine               = "mysql"
  engine_version       = "8.0"
  instance_class       = "db.t2.micro"
  name                 = "appdb"
  username             = "admin"
  password             = "yourpassword"
  parameter_group_name = "default.mysql8.0"
  db_subnet_group_name = aws_db_subnet_group.app_db_subnet_group.name
  vpc_security_group_ids = [aws_security_group.app_sg.id]

  tags = {
    Name = "AppDBInstance"
  }
}


ðŸ’¥ Deploying Your Infrastructure
With all components defined, you can now deploy your infrastructure:

terraform init
terraform plan
terraform apply

terraform init initializes the Terraform configuration, preparing your working directory for other commands.
terraform plan creates an execution plan, allowing you to review the changes Terraform will make to your infrastructure.
terraform apply applies the changes to create the defined resources.
