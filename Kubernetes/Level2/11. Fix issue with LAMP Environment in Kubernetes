FYI, deployment name is lamp-wp and its using a service named lamp-service. 
The Apache is using http default port and nodeport is 30008. From the application logs it has been identified that application is facing some issues while connecting to the database in addition to other issues. Additionally, there are some environment variables associated with the pods like MYSQL_ROOT_PASSWORD, MYSQL_DATABASE, MYSQL_USER, MYSQL_PASSWORD, MYSQL_HOST.
Also do not try to delete/modify any other existing components like deployment name, service name, types, labels etc.


FYI
How LAMP stack elements work together :              
A high-level look at the LAMP stack order of execution shows how the elements interoperate. The process starts when the Apache web server receives requests for web pages from a user’s browser. If the request is for a PHP file, Apache passes the request to PHP, which loads the file and executes the code contained in the file. PHP also communicates with MySQL to fetch any data referenced in the code. 
PHP then uses the code in the file and the data from the database to create the HTML that browsers require to display web pages. The LAMP stack is efficient at handling not only static web pages, but also dynamic pages where the content may change each time it is loaded depending on the date, time, user identity and other factors. 
After running the file code, PHP then passes the resulting data back to the Apache web server to send to the browser. It can also store this new data in MySQL. And of course, all of these operations are enabled by the Linux operating system running at the base of the stack.




thor@jump_host ~$ kubectl describe deployments.apps lamp-wp 
Name:               lamp-wp
Namespace:          default
CreationTimestamp:  Tue, 21 Nov 2023 09:11:24 +0000
Labels:             app=lamp
Annotations:        deployment.kubernetes.io/revision: 1
Selector:           app=lamp,tier=frontend
Replicas:           1 desired | 1 updated | 1 total | 1 available | 0 unavailable
StrategyType:       Recreate
MinReadySeconds:    0
Pod Template:
  Labels:  app=lamp
           tier=frontend
  Containers:
   httpd-php-container:
    Image:      webdevops/php-apache:alpine-3-php7
    Port:       80/TCP
    Host Port:  0/TCP
    Environment:
      MYSQL_ROOT_PASSWORD:  <set to the key 'password' in secret 'mysql-root-pass'>  Optional: false
      MYSQL_DATABASE:       <set to the key 'database' in secret 'mysql-db-url'>     Optional: false
      MYSQL_USER:           <set to the key 'username' in secret 'mysql-user-pass'>  Optional: false
      MYSQL_PASSWORD:       <set to the key 'password' in secret 'mysql-user-pass'>  Optional: false
      MYSQL_HOST:           <set to the key 'host' in secret 'mysql-host'>           Optional: false
    Mounts:
      /opt/docker/etc/php/php.ini from php-config-volume (rw,path="php.ini")
   mysql-container:
    Image:      mysql:5.6
    Port:       3306/TCP
    Host Port:  0/TCP
    Environment:
      MYSQL_ROOT_PASSWORD:  <set to the key 'password' in secret 'mysql-root-pass'>  Optional: false
      MYSQL_DATABASE:       <set to the key 'database' in secret 'mysql-db-url'>     Optional: false
      MYSQL_USER:           <set to the key 'username' in secret 'mysql-user-pass'>  Optional: false
      MYSQL_PASSWORD:       <set to the key 'password' in secret 'mysql-user-pass'>  Optional: false
      MYSQL_HOST:           <set to the key 'host' in secret 'mysql-host'>           Optional: false
    Mounts:                 <none>
  Volumes:
   php-config-volume:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      php-config
    Optional:  false
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  <none>
NewReplicaSet:   lamp-wp-56c7c454fc (1/1 replicas created)
Events:
  Type    Reason             Age    From                   Message
  ----    ------             ----   ----                   -------
  Normal  ScalingReplicaSet  3m18s  deployment-controller  Scaled up replica set lamp-wp-56c7c454fc to 1



Edit lamp-svc port to default 80:
thor@jump_host ~$ kubectl edit  svc lamp-service 
apiVersion: v1
kind: Service
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app":"lamp"},"name":"lamp-service","namespace":"default"},"spec":{"ports":[{"nodePort":30008,"port":8080}],"selector":{"app":"lamp","tier":"frontend"},"type":"NodePort"}}
  creationTimestamp: "2023-11-21T09:11:24Z"
  labels:
    app: lamp
  name: lamp-service
  namespace: default
  resourceVersion: "2137"
  uid: 73e9a0a9-9683-4e24-86d6-391d34106486
spec:
  clusterIP: 10.96.35.143
  clusterIPs:
  - 10.96.35.143
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - nodePort: 30008
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: lamp
    tier: frontend
  sessionAffinity: None
  type: NodePort
status:
  loadBalancer: {}


thor@jump_host ~$ kubectl get svc lamp-service 
NAME           TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE
lamp-service   NodePort   10.96.35.143   <none>        80:30008/TCP   13m


thor@jump_host ~$ kubectl describe svc lamp-service 
Name:                     lamp-service
Namespace:                default
Labels:                   app=lamp
Annotations:              <none>
Selector:                 app=lamp,tier=frontend
Type:                     NodePort
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       10.96.35.143
IPs:                      10.96.35.143
Port:                     <unset>  80/TCP
TargetPort:               80/TCP
NodePort:                 <unset>  30008/TCP
Endpoints:                10.244.0.5:80
Session Affinity:         None
External Traffic Policy:  Cluster
Events:                   <none>


thor@jump_host ~$ kubectl exec -it lamp-wp-56c7c454fc-gj6tc  -c httpd-php-container /bin/bash
Defaulted container "httpd-php-container" out of: httpd-php-container, mysql-container
/ # cd /app/
/app # ls
index.php
/app # cat index.php 
<?php
$dbname = $_ENV['MYSQL_DATABASE'];
$dbuser = $_ENV['MYSQL_USER'];
$dbpass = $_ENV['MYSQL_PASSWORDS'];         <-------- greška, "S" na kraju
$dbhost = $_ENV['HOST_MYQSL'];                      <-------- greška, treba ići MYSQL_HOST
 
 
$connect = mysqli_connect($dbhost, $dbuser, $dbpass) or die("Unable to Connect to '$dbhost'");
 
$test_query = "SHOW TABLES FROM $dbname";
$result = mysqli_query($test_query);
 
if ($result->connect_error) {
   die("Connection failed: " . $conn->connect_error);
}
/app # exit


Copy this file locally and edit:
thor@jump_host ~$ vi index.php
thor@jump_host ~$ cat index.php 
<?php
$dbname = $_ENV['MYSQL_DATABASE'];
$dbuser = $_ENV['MYSQL_USER'];
$dbpass = $_ENV['MYSQL_PASSWORD'];
$dbhost = $_ENV['MYSQL_HOST'];
 
 
$connect = mysqli_connect($dbhost, $dbuser, $dbpass) or die("Unable to Connect to '$dbhost'");
 
$test_query = "SHOW TABLES FROM $dbname";
$result = mysqli_query($test_query);
 
if ($result->connect_error) {
   die("Connection failed: " . $conn->connect_error);
}
  echo "Connected successfully";
 

hor@jump_host ~$ kubectl create cm fixed-php-config --from-file=index.php 
configmap/fixed-php-config created

thor@jump_host ~$ kubectl get cm
NAME               DATA   AGE
fixed-php-config   1      6s
kube-root-ca.crt   1      30m
php-config         1      20m

thor@jump_host ~$ kubectl describe cm fixed-php-config 
Name:         fixed-php-config
Namespace:    default
Labels:       <none>
Annotations:  <none>

Data
====
index.php:
----
<?php
$dbname = $_ENV['MYSQL_DATABASE'];
$dbuser = $_ENV['MYSQL_USER'];
$dbpass = $_ENV['MYSQL_PASSWORD'];
$dbhost = $_ENV['MYSQL_HOST'];
 
 
$connect = mysqli_connect($dbhost, $dbuser, $dbpass) or die("Unable to Connect to '$dbhost'");
 
$test_query = "SHOW TABLES FROM $dbname";
$result = mysqli_query($test_query);
 
if ($result->connect_error) {
   die("Connection failed: " . $conn->connect_error);
}
  echo "Connected successfully";


Now we have to mount this configmap under the php container, at the location /app/index.php.
It is necessary to put this subPath: index.php to be created as a file, otherwise it will be created as a folder index.php:
P.S. defaultumode: 420 is added automatically)


k edit deploy!
 
thor@jump_host ~$ kubectl describe deployments.apps lamp-wp 
Name:               lamp-wp
Namespace:          default
CreationTimestamp:  Tue, 21 Nov 2023 09:11:24 +0000
Labels:             app=lamp
Annotations:        deployment.kubernetes.io/revision: 2
Selector:           app=lamp,tier=frontend
Replicas:           1 desired | 1 updated | 1 total | 1 available | 0 unavailable
StrategyType:       Recreate
MinReadySeconds:    0
Pod Template:
  Labels:  app=lamp
           tier=frontend
  Containers:
   httpd-php-container:
    Image:      webdevops/php-apache:alpine-3-php7
    Port:       80/TCP
    Host Port:  0/TCP
    Environment:
      MYSQL_ROOT_PASSWORD:  <set to the key 'password' in secret 'mysql-root-pass'>  Optional: false
      MYSQL_DATABASE:       <set to the key 'database' in secret 'mysql-db-url'>     Optional: false
      MYSQL_USER:           <set to the key 'username' in secret 'mysql-user-pass'>  Optional: false
      MYSQL_PASSWORD:       <set to the key 'password' in secret 'mysql-user-pass'>  Optional: false
      MYSQL_HOST:           <set to the key 'host' in secret 'mysql-host'>           Optional: false
    Mounts:
      /app/index.php from fixed-php-config (rw,path="index.php")
      /opt/docker/etc/php/php.ini from php-config-volume (rw,path="php.ini")
   mysql-container:
    Image:      mysql:5.6
    Port:       3306/TCP
    Host Port:  0/TCP
    Environment:
      MYSQL_ROOT_PASSWORD:  <set to the key 'password' in secret 'mysql-root-pass'>  Optional: false
      MYSQL_DATABASE:       <set to the key 'database' in secret 'mysql-db-url'>     Optional: false
      MYSQL_USER:           <set to the key 'username' in secret 'mysql-user-pass'>  Optional: false
      MYSQL_PASSWORD:       <set to the key 'password' in secret 'mysql-user-pass'>  Optional: false
      MYSQL_HOST:           <set to the key 'host' in secret 'mysql-host'>           Optional: false
    Mounts:                 <none>
  Volumes:
   php-config-volume:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      php-config
    Optional:  false
   fixed-php-config:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      fixed-php-config
    Optional:  false
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  lamp-wp-56c7c454fc (0/0 replicas created)
NewReplicaSet:   lamp-wp-7bc4b8b79f (1/1 replicas created)
Events:
  Type    Reason             Age   From                   Message
  ----    ------             ----  ----                   -------
  Normal  ScalingReplicaSet  26m   deployment-controller  Scaled up replica set lamp-wp-56c7c454fc to 1
  Normal  ScalingReplicaSet  30s   deployment-controller  Scaled down replica set lamp-wp-56c7c454fc to 0 from 1
  Normal  ScalingReplicaSet  26s   deployment-controller  Scaled up replica set lamp-wp-7bc4b8b79f to 1


BinaryData
====

Events:  <none>


Check is good file mounted inside container:
thor@jump_host ~$ kubectl exec -it lamp-wp-748b69d7f6-pbs6d  -c httpd-php-container -- sh
/ # 
/ # 
/ # cd app/
/app # ls
index.php

/app # cat index.php 
<?php
$dbname = $_ENV['MYSQL_DATABASE'];
$dbuser = $_ENV['MYSQL_USER'];
$dbpass = $_ENV['MYSQL_PASSWORD'];
$dbhost = $_ENV['MYSQL_HOST'];
 
 
$connect = mysqli_connect($dbhost, $dbuser, $dbpass) or die("Unable to Connect to '$dbhost'");
 
$test_query = "SHOW TABLES FROM $dbname";
$result = mysqli_query($test_query);
 
if ($result->connect_error) {
   die("Connection failed: " . $conn->connect_error);
}
  echo "Connected successfully";
